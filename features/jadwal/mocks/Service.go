// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "jadwaldokter/features/jadwal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddJadwal provides a mock function with given fields: newJadwal
func (_m *Service) AddJadwal(newJadwal domain.JadwalCore) (domain.JadwalCore, error) {
	ret := _m.Called(newJadwal)

	var r0 domain.JadwalCore
	if rf, ok := ret.Get(0).(func(domain.JadwalCore) domain.JadwalCore); ok {
		r0 = rf(newJadwal)
	} else {
		r0 = ret.Get(0).(domain.JadwalCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.JadwalCore) error); ok {
		r1 = rf(newJadwal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJadwal provides a mock function with given fields: id
func (_m *Service) DeleteJadwal(id uint) (domain.JadwalCore, error) {
	ret := _m.Called(id)

	var r0 domain.JadwalCore
	if rf, ok := ret.Get(0).(func(uint) domain.JadwalCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.JadwalCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJadwal provides a mock function with given fields: hari
func (_m *Service) GetJadwal(hari string) ([]domain.JadwalCore, error) {
	ret := _m.Called(hari)

	var r0 []domain.JadwalCore
	if rf, ok := ret.Get(0).(func(string) []domain.JadwalCore); ok {
		r0 = rf(hari)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.JadwalCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hari)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
